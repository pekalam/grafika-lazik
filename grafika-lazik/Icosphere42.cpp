#include "stdafx.h"
#include "Icosphere42.h"
#include <random>
#include <ctime>


int Icosphere42::indicesX[80] = {
		13,
		15,
		13,
		1,
		15,
		17,
		15,
		1,
		17,
		19,
		17,
		1,
		19,
		21,
		19,
		1,
		21,
		13,
		21,
		1,
		16,
		24,
		16,
		2,
		14,
		26,
		14,
		6,
		22,
		28,
		22,
		12,
		20,
		30,
		20,
		11,
		18,
		32,
		18,
		8,
		33,
		35,
		33,
		4,
		35,
		37,
		35,
		4,
		37,
		39,
		37,
		4,
		39,
		41,
		39,
		4,
		41,
		33,
		41,
		4,
		34,
		26,
		34,
		5,
		36,
		28,
		36,
		3,
		38,
		30,
		38,
		7,
		40,
		32,
		40,
		9,
		42,
		24,
		42,
		10,
};

int Icosphere42::indicesY[80] = {
14,
14,
12,
13,
16,
16,
6 ,
15,
18,
18,
2 ,
17,
20,
20,
8 ,
19,
22,
22,
11,
21,
23,
23,
6 ,
16,
25,
25,
12,
14,
27,
27,
11,
22,
29,
29,
8 ,
20,
31,
31,
2 ,
18,
34,
34,
10,
33,
36,
36,
5 ,
35,
38,
38,
3 ,
37,
40,
40,
7 ,
39,
42,
42,
9 ,
41,
23,
23,
10,
34,
25,
25,
5 ,
36,
27,
27,
3 ,
38,
29,
29,
7 ,
40,
31,
31,
9 ,
42, };

int Icosphere42::indicesZ[80] = {
15,
6 ,
14,
15,
17,
2 ,
16,
17,
19,
8 ,
18,
19,
21,
11,
20,
21,
13,
12,
22,
13,
24,
10,
23,
24,
26,
5 ,
25,
26,
28,
3 ,
27,
28,
30,
7 ,
29,
30,
32,
9 ,
31,
32,
35,
5 ,
34,
35,
37,
3 ,
36,
37,
39,
7 ,
38,
39,
41,
9 ,
40,
41,
33,
10,
42,
33,
26,
6 ,
23,
26,
28,
12,
25,
28,
30,
11,
27,
30,
32,
8 ,
29,
32,
24,
2 ,
31,
24,
};

Icosphere42::Icosphere42(GLfloat r, Vector3 position, Vector3 rotation, Vector3 color) : 
	SceneObject(position, rotation, color), r(r)
{
}

Icosphere42::Icosphere42(const Icosphere42& cp)
{
	std::memcpy(this->verticesX, cp.verticesX, 42*sizeof(GLfloat));
	std::memcpy(this->verticesY, cp.verticesY, 42 * sizeof(GLfloat));
	std::memcpy(this->verticesZ, cp.verticesZ, 42 * sizeof(GLfloat));
	this->r = cp.r;
	this->_position = cp._position;
	std::memcpy(this->gradient, cp.gradient, sizeof(Vector3) * 3);
	this->hasGradient = cp.hasGradient;
}

void Icosphere42::drawObject()
{
	glBegin(GL_TRIANGLES);
	for(int i = 0; i < 80; i++)
	{
		if (hasGradient)
			glColor3f(gradient[0].x, gradient[0].y, gradient[0].z);
		glVertex3f(
			_position.x + verticesX[(indicesX[i]-1)]*r,
			_position.y + verticesY[(indicesX[i]-1)]*r,
			_position.z + verticesZ[(indicesX[i]-1)]*r
			);
		if (hasGradient)
			glColor3f(gradient[1].x, gradient[1].y, gradient[1].z);
		glVertex3f(
			_position.x + verticesX[(indicesY[i] - 1)] * r,
			_position.y + verticesY[(indicesY[i] - 1)]*r,
			_position.z + verticesZ[(indicesY[i] -1)]*r
		);
		if (hasGradient)
			glColor3f(gradient[2].x, gradient[2].y, gradient[2].z);
		glVertex3f(
			_position.x + verticesX[(indicesZ[i] - 1)]*r,
			_position.y + verticesY[(indicesZ[i] - 1)]*r,
			_position.z + verticesZ[(indicesZ[i] -1)]*r
		);
	}
	glEnd();
}
